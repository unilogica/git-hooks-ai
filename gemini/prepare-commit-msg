#!/usr/bin/env bash
set -e

COMMIT_MSG_FILE=$1

# Se o GIT_EDITOR for : (true), o Git estÃ¡ apenas fazendo verificaÃ§Ãµes internas. NÃ£o execute.
if [ "$GIT_EDITOR" = ":" ]; then
  exit 0
fi

# --- 1. LÃ³gica de VerificaÃ§Ã£o Inteligente (A CorreÃ§Ã£o Final) ---
# Primeiro, isola apenas o conteÃºdo editÃ¡vel da mensagem, ou seja,
# tudo que estÃ¡ ACIMA da linha de corte de diff do Git.
EDITABLE_CONTENT=$(sed '/^# ------------------------ >8 ------------------------/q' "$COMMIT_MSG_FILE")

# Agora, verifica se nesse bloco editÃ¡vel existe alguma linha
# que NÃƒO seja um comentÃ¡rio (#) ou uma linha em branco.
if [ -n "$(echo "$EDITABLE_CONTENT" | grep -vE '^\s*#|^$')" ]; then
    # Se encontrarmos texto real, nÃ£o fazemos nada.
    exit 0
fi

# --- 2. VerificaÃ§Ãµes de DependÃªncia e Chave ---
if ! command -v jq &> /dev/null; then
    echo "ERRO: A dependÃªncia 'jq' nÃ£o foi encontrada." >&2
    exit 1
fi
if [ -z "$GEMINI_API_KEY" ]; then
    echo "AVISO: env GEMINI_API_KEY nÃ£o definida." >&2
    exit 0
fi

# --- 3. Coletando as AlteraÃ§Ãµes ---
DIFF=$(git diff --staged)
if [ -z "$DIFF" ]; then
    exit 0 # Nenhuma alteraÃ§Ã£o no stage, sai silenciosamente.
fi

# --- 4. Chamada para a API ---
echo "ðŸ¤– Gerando mensagem de commit com o Gemini... (aguarde)"

PROMPT="VocÃª Ã© um assistente que cria mensagens de commit curtas e claras no padrÃ£o Conventional Commits. Gere uma mensagem concisa para o seguinte diff:\n\n$DIFF"

JSON_PAYLOAD=$(jq -n --arg prompt "$PROMPT" \
'{
  "contents": [{"parts": [{"text": $prompt}]}],
  "generationConfig": {"temperature": 0.3, "maxOutputTokens": 100}
}')

API_RESPONSE=$(curl --silent --request POST \
    "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=$GEMINI_API_KEY" \
    -H "Content-Type: application/json" \
    -d "$JSON_PAYLOAD")

# --- 5. Processando a Resposta e Escrevendo no Arquivo ---
GENERATED_MSG=$(echo "$API_RESPONSE" | jq -e -r '.candidates[0].content.parts[0].text')

if [ -n "$GENERATED_MSG" ]; then
    # Insere a mensagem gerada NO TOPO do arquivo de commit, preservando o diff.
    (echo "$GENERATED_MSG"; echo; cat "$COMMIT_MSG_FILE") > "$COMMIT_MSG_FILE.tmp" && mv "$COMMIT_MSG_FILE.tmp" "$COMMIT_MSG_FILE"
else
    echo "ERRO: Falha ao gerar a mensagem do Gemini. A API pode ter retornado um erro." >&2
fi

exit 0
